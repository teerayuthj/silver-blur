{"version":3,"file":"silver-blur.min.js","mappings":"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","sources":["webpack://SilverBlur/webpack/universalModuleDefinition","webpack://SilverBlur/./scripts/silver-blur.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SilverBlur\"] = factory();\n\telse\n\t\troot[\"SilverBlur\"] = factory();\n})(this, () => {\nreturn ","// Silver Price Blur System JavaScript\n// Handles market hours detection and price blurring for Bangkok timezone\n\nclass SilverPriceBlur {\n    constructor(options = {}) {\n        this.isInitialized = false;\n        this.blurCheckInterval = null;\n        this.currentBlurState = false;\n        this.holidayData = null;\n        \n        // Configuration options\n        this.config = {\n            holidayJsonUrl: options.holidayJsonUrl || './config/holidays.json',\n            cdnBaseUrl: options.cdnBaseUrl || null,\n            ...options\n        };\n        \n        // Holiday configuration will be loaded from external file\n        \n        // Price element IDs to blur\n        this.priceElements = [\n            'slvUsdBid',\n            'slvUsdOffer', \n            'slvKgBid',\n            'slvKgOffer',\n            'slvKgVat',\n            'slvUsdChg',\n            'slvKgChg'\n        ];\n        \n        // VAT label elements to blur\n        this.vatLabelElements = [\n            '.sv-vat-label'\n        ];\n        \n        // Timer container elements for overlay\n        this.timerContainers = [\n            '.sv-event-timer'\n        ];\n        \n        console.log('Silver Blur System: Initialized');\n    }\n    \n    // Get current Bangkok time\n    getBangkokTime() {\n        const now = new Date();\n        const bangkokTime = new Date(now.toLocaleString(\"en-US\", {timeZone: \"Asia/Bangkok\"}));\n        return bangkokTime;\n    }\n    \n    // Load holiday configuration from external JSON file\n    async loadHolidayData() {\n        const holidayUrl = this.config.cdnBaseUrl \n            ? `${this.config.cdnBaseUrl}/config/holidays.json`\n            : this.config.holidayJsonUrl;\n            \n        try {\n            console.log(`Silver Blur: Loading holidays from ${holidayUrl}`);\n            const response = await fetch(holidayUrl);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            this.holidayData = await response.json();\n            console.log('Silver Blur: Holiday data loaded successfully');\n            return true;\n        } catch (error) {\n            console.warn('Silver Blur: Failed to load holiday data:', error.message);\n            console.warn('Silver Blur: Continuing with weekend-only blur');\n            this.holidayData = { holidays: {} };\n            return false;\n        }\n    }\n    \n    // Check if current date is a holiday\n    isHoliday(date = null) {\n        if (!this.holidayData || !this.holidayData.holidays) {\n            return false;\n        }\n        \n        const checkDate = date || this.getBangkokTime();\n        const year = checkDate.getFullYear().toString();\n        const month = String(checkDate.getMonth() + 1).padStart(2, '0');\n        const day = String(checkDate.getDate()).padStart(2, '0');\n        const dateKey = `${month}-${day}`;\n        \n        return this.holidayData.holidays[year] && this.holidayData.holidays[year][dateKey];\n    }\n    \n    // Get holiday information for a specific date\n    getHolidayInfo(date = null) {\n        if (!this.holidayData || !this.holidayData.holidays) {\n            return null;\n        }\n        \n        const checkDate = date || this.getBangkokTime();\n        const year = checkDate.getFullYear().toString();\n        const month = String(checkDate.getMonth() + 1).padStart(2, '0');\n        const day = String(checkDate.getDate()).padStart(2, '0');\n        const dateKey = `${month}-${day}`;\n        \n        if (this.holidayData.holidays[year] && this.holidayData.holidays[year][dateKey]) {\n            return this.holidayData.holidays[year][dateKey];\n        }\n        return null;\n    }\n    \n    // Check if market is open (prices available) - Only blur on weekends and holidays\n    isMarketOpen() {\n        const bangkokTime = this.getBangkokTime();\n        const dayOfWeek = bangkokTime.getDay(); // 0 = Sunday, 6 = Saturday\n        \n        // Weekend check (Saturday = 6, Sunday = 0)\n        if (dayOfWeek === 0 || dayOfWeek === 6) {\n            console.log(`Silver Blur: Weekend detected (${dayOfWeek === 0 ? 'Sunday' : 'Saturday'}), price not available`);\n            return false;\n        }\n        \n        // Holiday check\n        const holidayInfo = this.getHolidayInfo(bangkokTime);\n        if (holidayInfo) {\n            console.log(`Silver Blur: Holiday detected (${holidayInfo.name}), price not available`);\n            return false;\n        }\n        \n        // Weekdays (Monday-Friday) that are not holidays - price is always available\n        console.log(`Silver Blur: Bangkok time ${bangkokTime.toLocaleTimeString('th-TH')}, Price AVAILABLE (weekday, not holiday)`);\n        return true;\n    }\n    \n    // Apply blur effect to price elements\n    applyBlur() {\n        if (this.currentBlurState) return; // Already blurred\n        \n        console.log('Silver Blur: Price not available - applying blur effect');\n        \n        // Blur individual price elements\n        this.priceElements.forEach(elementId => {\n            const element = document.getElementById(elementId);\n            if (element) {\n                element.classList.add('sv-blur-price', 'sv-price-blurred');\n            }\n        });\n        \n        // Blur VAT label elements\n        this.vatLabelElements.forEach(selector => {\n            const elements = document.querySelectorAll(selector);\n            elements.forEach(element => {\n                element.classList.add('sv-blur-price', 'sv-price-blurred');\n            });\n        });\n        \n        // Add overlay to timer containers\n        this.timerContainers.forEach(selector => {\n            const elements = document.querySelectorAll(selector);\n            elements.forEach(element => {\n                element.classList.add('sv-blur-overlay', 'sv-market-closed');\n            });\n        });\n        \n        this.currentBlurState = true;\n    }\n    \n    // Remove blur effect from price elements\n    removeBlur() {\n        if (!this.currentBlurState) return; // Already unblurred\n        \n        console.log('Silver Blur: Price available - removing blur effect');\n        \n        // Remove blur from price elements\n        this.priceElements.forEach(elementId => {\n            const element = document.getElementById(elementId);\n            if (element) {\n                element.classList.remove('sv-blur-price', 'sv-price-blurred');\n            }\n        });\n        \n        // Remove blur from VAT label elements\n        this.vatLabelElements.forEach(selector => {\n            const elements = document.querySelectorAll(selector);\n            elements.forEach(element => {\n                element.classList.remove('sv-blur-price', 'sv-price-blurred');\n            });\n        });\n        \n        // Remove overlay from timer containers\n        this.timerContainers.forEach(selector => {\n            const elements = document.querySelectorAll(selector);\n            elements.forEach(element => {\n                element.classList.remove('sv-blur-overlay', 'sv-market-closed');\n            });\n        });\n        \n        this.currentBlurState = false;\n    }\n    \n    // Check market status and update blur accordingly\n    updateBlurStatus() {\n        const marketOpen = this.isMarketOpen();\n        \n        if (marketOpen && this.currentBlurState) {\n            this.removeBlur();\n        } else if (!marketOpen && !this.currentBlurState) {\n            this.applyBlur();\n        }\n    }\n    \n    // Initialize the blur system\n    async init() {\n        if (this.isInitialized) {\n            console.log('Silver Blur: Already initialized');\n            return;\n        }\n        \n        console.log('Silver Blur: Starting initialization...');\n        \n        // Load holiday data first\n        await this.loadHolidayData();\n        \n        // Wait for DOM to be ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.startBlurSystem());\n        } else {\n            this.startBlurSystem();\n        }\n    }\n    \n    // Start the blur checking system\n    startBlurSystem() {\n        // Initial check\n        this.updateBlurStatus();\n        \n        // Set up interval to check every 30 seconds\n        this.blurCheckInterval = setInterval(() => {\n            this.updateBlurStatus();\n        }, 30000);\n        \n        this.isInitialized = true;\n        console.log('Silver Blur: System started, checking every 30 seconds');\n    }\n    \n    // Stop the blur system (cleanup)\n    stop() {\n        if (this.blurCheckInterval) {\n            clearInterval(this.blurCheckInterval);\n            this.blurCheckInterval = null;\n        }\n        \n        this.removeBlur();\n        this.isInitialized = false;\n        console.log('Silver Blur: System stopped');\n    }\n    \n    // Add a new holiday to the configuration\n    addHoliday(year, month, day, name, nameEn = '', type = 'custom') {\n        if (!this.holidayData || !this.holidayData.holidays) {\n            console.error('Silver Blur: Holiday data not loaded');\n            return false;\n        }\n        \n        const yearStr = year.toString();\n        const dateKey = `${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n        \n        if (!this.holidayData.holidays[yearStr]) {\n            this.holidayData.holidays[yearStr] = {};\n        }\n        \n        this.holidayData.holidays[yearStr][dateKey] = {\n            name: name,\n            name_en: nameEn || name,\n            type: type\n        };\n        \n        console.log(`Silver Blur: Added holiday - ${name} (${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')})`);\n        return true;\n    }\n    \n    // Remove a holiday from the configuration\n    removeHoliday(year, month, day) {\n        if (!this.holidayData || !this.holidayData.holidays) {\n            console.error('Silver Blur: Holiday data not loaded');\n            return false;\n        }\n        \n        const yearStr = year.toString();\n        const dateKey = `${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n        \n        if (this.holidayData.holidays[yearStr] && this.holidayData.holidays[yearStr][dateKey]) {\n            const holidayName = this.holidayData.holidays[yearStr][dateKey].name;\n            delete this.holidayData.holidays[yearStr][dateKey];\n            console.log(`Silver Blur: Removed holiday - ${holidayName} (${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')})`);\n            return true;\n        }\n        \n        console.warn(`Silver Blur: Holiday not found (${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')})`);\n        return false;\n    }\n    \n    // List all holidays for a specific year\n    listHolidays(year) {\n        if (!this.holidayData || !this.holidayData.holidays) {\n            console.error('Silver Blur: Holiday data not loaded');\n            return [];\n        }\n        \n        const yearStr = year.toString();\n        const holidays = this.holidayData.holidays[yearStr] || {};\n        \n        console.log(`=== Holidays for ${year} ===`);\n        Object.keys(holidays).sort().forEach(dateKey => {\n            const holiday = holidays[dateKey];\n            console.log(`${year}-${dateKey}: ${holiday.name} (${holiday.type})`);\n        });\n        console.log('=== End List ===');\n        \n        return holidays;\n    }\n    \n    // Manual test function for debugging\n    testTimeRange() {\n        const bangkokTime = this.getBangkokTime();\n        const holidayInfo = this.getHolidayInfo(bangkokTime);\n        \n        console.log('=== Silver Blur Time Test ===');\n        console.log('Current Bangkok Time:', bangkokTime.toLocaleString('th-TH', {timeZone: 'Asia/Bangkok'}));\n        console.log('Day of Week:', ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][bangkokTime.getDay()]);\n        console.log('Is Holiday:', holidayInfo ? `Yes - ${holidayInfo.name}` : 'No');\n        console.log('Blur Logic: Weekends + Holidays only');\n        console.log('Market Status:', this.isMarketOpen() ? 'OPEN' : 'CLOSED');\n        console.log('Current Blur State:', this.currentBlurState ? 'BLURRED' : 'VISIBLE');\n        console.log('=== End Test ===');\n    }\n}\n\n// Global instance - can be reconfigured if needed\nwindow.silverBlur = window.silverBlur || new SilverPriceBlur();\n\n// Helper function to initialize with CDN\nwindow.initSilverBlurCDN = (cdnBaseUrl) => {\n    window.silverBlur = new SilverPriceBlur({\n        cdnBaseUrl: cdnBaseUrl\n    });\n    return window.silverBlur.init();\n};\n\n// Auto-initialize when script loads\ndocument.addEventListener('DOMContentLoaded', async () => {\n    // Wait a bit for the main silver price system to initialize\n    setTimeout(async () => {\n        await window.silverBlur.init();\n    }, 1000);\n});\n\n// Expose test function globally for console testing\nwindow.testSilverBlur = () => {\n    window.silverBlur.testTimeRange();\n};\n\n// Expose holiday management functions globally\nwindow.addHoliday = (year, month, day, name, nameEn = '', type = 'custom') => {\n    return window.silverBlur.addHoliday(year, month, day, name, nameEn, type);\n};\n\nwindow.removeHoliday = (year, month, day) => {\n    return window.silverBlur.removeHoliday(year, month, day);\n};\n\nwindow.listHolidays = (year) => {\n    return window.silverBlur.listHolidays(year);\n};"],"names":["root","factory","exports","module","define","amd","this","SilverPriceBlur","constructor","options","isInitialized","blurCheckInterval","currentBlurState","holidayData","config","holidayJsonUrl","cdnBaseUrl","priceElements","vatLabelElements","timerContainers","console","log","getBangkokTime","now","Date","toLocaleString","timeZone","loadHolidayData","holidayUrl","response","fetch","ok","Error","status","json","error","warn","message","holidays","isHoliday","date","checkDate","year","getFullYear","toString","dateKey","String","getMonth","padStart","getDate","getHolidayInfo","isMarketOpen","bangkokTime","dayOfWeek","getDay","holidayInfo","name","toLocaleTimeString","applyBlur","forEach","elementId","element","document","getElementById","classList","add","selector","querySelectorAll","removeBlur","remove","updateBlurStatus","marketOpen","init","readyState","addEventListener","startBlurSystem","setInterval","stop","clearInterval","addHoliday","month","day","nameEn","type","yearStr","name_en","removeHoliday","holidayName","listHolidays","Object","keys","sort","holiday","testTimeRange","window","silverBlur","initSilverBlurCDN","async","setTimeout","testSilverBlur"],"sourceRoot":""}