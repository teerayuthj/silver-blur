{"version":3,"file":"silver-blur.min.js","mappings":"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","sources":["webpack://SilverBlur/webpack/universalModuleDefinition","webpack://SilverBlur/./scripts/silver-blur.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SilverBlur\"] = factory();\n\telse\n\t\troot[\"SilverBlur\"] = factory();\n})(this, () => {\nreturn ","// Silver Price Blur System JavaScript\n// Handles market hours detection and price blurring for Bangkok timezone\n\nclass SilverPriceBlur {\n    constructor(options = {}) {\n        this.isInitialized = false;\n        this.blurCheckInterval = null;\n        this.currentBlurState = false;\n        this.holidayData = null;\n        \n        // Configuration options\n        this.config = {\n            holidayJsonUrl: options.holidayJsonUrl || './config/holidays.json',\n            cdnBaseUrl: options.cdnBaseUrl || null,\n            marketOpenHour: options.marketOpenHour || 5,\n            marketOpenMinute: options.marketOpenMinute || 0,\n            weekendCloseHour: options.weekendCloseHour || 4,  // Saturday close time\n            weekendCloseMinute: options.weekendCloseMinute || 0,\n            ...options\n        };\n        \n        // Holiday configuration will be loaded from external file\n        \n        // Price element IDs to blur\n        this.priceElements = [\n            'slvUsdBid',\n            'slvUsdOffer', \n            'slvKgBid',\n            'slvKgOffer',\n            'slvKgVat',\n            'slvUsdChg',\n            'slvKgChg'\n        ];\n        \n        // VAT label elements to blur\n        this.vatLabelElements = [\n            '.sv-vat-label'\n        ];\n        \n        // Timer container elements for overlay\n        this.timerContainers = [\n            '.sv-event-timer'\n        ];\n        \n        console.log('Silver Blur System: Initialized');\n    }\n    \n    // Get current Bangkok time\n    getBangkokTime() {\n        const now = new Date();\n        const bangkokTime = new Date(now.toLocaleString(\"en-US\", {timeZone: \"Asia/Bangkok\"}));\n        return bangkokTime;\n    }\n    \n    // Load holiday configuration from external JSON file\n    async loadHolidayData() {\n        const holidayUrl = this.config.cdnBaseUrl \n            ? `${this.config.cdnBaseUrl}/config/holidays.json`\n            : this.config.holidayJsonUrl;\n            \n        try {\n            console.log(`Silver Blur: Loading holidays from ${holidayUrl}`);\n            const response = await fetch(holidayUrl);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            this.holidayData = await response.json();\n            console.log('Silver Blur: Holiday data loaded successfully');\n            return true;\n        } catch (error) {\n            console.warn('Silver Blur: Failed to load holiday data:', error.message);\n            console.warn('Silver Blur: Continuing with weekend-only blur');\n            this.holidayData = { holidays: {} };\n            return false;\n        }\n    }\n    \n    // Check if current date is a holiday\n    isHoliday(date = null) {\n        if (!this.holidayData || !this.holidayData.holidays) {\n            return false;\n        }\n        \n        const checkDate = date || this.getBangkokTime();\n        const year = checkDate.getFullYear().toString();\n        const month = String(checkDate.getMonth() + 1).padStart(2, '0');\n        const day = String(checkDate.getDate()).padStart(2, '0');\n        const dateKey = `${month}-${day}`;\n        \n        return this.holidayData.holidays[year] && this.holidayData.holidays[year][dateKey];\n    }\n    \n    // Get holiday information for a specific date\n    getHolidayInfo(date = null) {\n        if (!this.holidayData || !this.holidayData.holidays) {\n            return null;\n        }\n        \n        const checkDate = date || this.getBangkokTime();\n        const year = checkDate.getFullYear().toString();\n        const month = String(checkDate.getMonth() + 1).padStart(2, '0');\n        const day = String(checkDate.getDate()).padStart(2, '0');\n        const dateKey = `${month}-${day}`;\n        \n        if (this.holidayData.holidays[year] && this.holidayData.holidays[year][dateKey]) {\n            return this.holidayData.holidays[year][dateKey];\n        }\n        return null;\n    }\n    \n    // Check if current time is in weekend closure period (Saturday 04:00 - Sunday 24:00)\n    isWeekendClosure() {\n        const bangkokTime = this.getBangkokTime();\n        const dayOfWeek = bangkokTime.getDay(); // 0 = Sunday, 6 = Saturday\n        const currentHour = bangkokTime.getHours();\n        const currentMinute = bangkokTime.getMinutes();\n        const currentTotalMinutes = currentHour * 60 + currentMinute;\n        const weekendCloseMinutes = this.config.weekendCloseHour * 60 + this.config.weekendCloseMinute;\n        \n        // Sunday - closed all day\n        if (dayOfWeek === 0) {\n            return true;\n        }\n        \n        // Saturday - closed from 04:00 onwards\n        if (dayOfWeek === 6 && currentTotalMinutes >= weekendCloseMinutes) {\n            return true;\n        }\n        \n        return false;\n    }\n    \n    // Check if market is open (prices available) - Global market hours with weekend and holiday closures\n    isMarketOpen() {\n        const bangkokTime = this.getBangkokTime();\n        const dayOfWeek = bangkokTime.getDay(); // 0 = Sunday, 6 = Saturday\n        const currentHour = bangkokTime.getHours();\n        const currentMinute = bangkokTime.getMinutes();\n        const currentTotalMinutes = currentHour * 60 + currentMinute;\n        const marketOpenMinutes = this.config.marketOpenHour * 60 + this.config.marketOpenMinute;\n        \n        // Weekend closure check\n        if (this.isWeekendClosure()) {\n            const dayName = dayOfWeek === 0 ? 'Sunday' : 'Saturday';\n            const timeInfo = dayOfWeek === 6 ? ` (closed from ${this.config.weekendCloseHour.toString().padStart(2, '0')}:${this.config.weekendCloseMinute.toString().padStart(2, '0')})` : '';\n            console.log(`Silver Blur: Weekend closure - ${dayName}${timeInfo}, price not available`);\n            return false;\n        }\n        \n        // Holiday check\n        const holidayInfo = this.getHolidayInfo(bangkokTime);\n        if (holidayInfo) {\n            console.log(`Silver Blur: Holiday detected (${holidayInfo.name}), price not available`);\n            return false;\n        }\n        \n        // Check if it's after a holiday and before market open time\n        if (this.isAfterHolidayBeforeOpen()) {\n            console.log(`Silver Blur: After holiday, before market open (${this.config.marketOpenHour.toString().padStart(2, '0')}:${this.config.marketOpenMinute.toString().padStart(2, '0')}), price not available`);\n            return false;\n        }\n        \n        // Weekday early hours check (before 05:00)\n        if (dayOfWeek >= 1 && dayOfWeek <= 5 && currentTotalMinutes < marketOpenMinutes) {\n            console.log(`Silver Blur: Before market hours (opens at ${this.config.marketOpenHour.toString().padStart(2, '0')}:${this.config.marketOpenMinute.toString().padStart(2, '0')}), price not available`);\n            return false;\n        }\n        \n        // Market is open - weekdays from 05:00-24:00 (except Saturday from 04:00+)\n        console.log(`Silver Blur: Bangkok time ${bangkokTime.toLocaleTimeString('th-TH')}, Price AVAILABLE (global market hours)`);\n        return true;\n    }\n    \n    // Check if current time is after a holiday but before market open time (05:00)\n    isAfterHolidayBeforeOpen() {\n        const bangkokTime = this.getBangkokTime();\n        const currentHour = bangkokTime.getHours();\n        const currentMinute = bangkokTime.getMinutes();\n        const currentTotalMinutes = currentHour * 60 + currentMinute;\n        const marketOpenMinutes = this.config.marketOpenHour * 60 + this.config.marketOpenMinute;\n        \n        // Check if yesterday was a holiday\n        const yesterday = new Date(bangkokTime);\n        yesterday.setDate(yesterday.getDate() - 1);\n        const yesterdayHoliday = this.getHolidayInfo(yesterday);\n        \n        // If yesterday was a holiday and current time is before market open\n        if (yesterdayHoliday && currentTotalMinutes < marketOpenMinutes) {\n            return true;\n        }\n        \n        return false;\n    }\n    \n    // Apply blur effect to price elements\n    applyBlur() {\n        if (this.currentBlurState) return; // Already blurred\n        \n        console.log('Silver Blur: Price not available - applying blur effect');\n        \n        // Blur individual price elements\n        this.priceElements.forEach(elementId => {\n            const element = document.getElementById(elementId);\n            if (element) {\n                element.classList.add('sv-blur-price', 'sv-price-blurred');\n            }\n        });\n        \n        // Blur VAT label elements\n        this.vatLabelElements.forEach(selector => {\n            const elements = document.querySelectorAll(selector);\n            elements.forEach(element => {\n                element.classList.add('sv-blur-price', 'sv-price-blurred');\n            });\n        });\n        \n        // Add overlay to timer containers\n        this.timerContainers.forEach(selector => {\n            const elements = document.querySelectorAll(selector);\n            elements.forEach(element => {\n                element.classList.add('sv-blur-overlay', 'sv-market-closed');\n            });\n        });\n        \n        this.currentBlurState = true;\n    }\n    \n    // Remove blur effect from price elements\n    removeBlur() {\n        if (!this.currentBlurState) return; // Already unblurred\n        \n        console.log('Silver Blur: Price available - removing blur effect');\n        \n        // Remove blur from price elements\n        this.priceElements.forEach(elementId => {\n            const element = document.getElementById(elementId);\n            if (element) {\n                element.classList.remove('sv-blur-price', 'sv-price-blurred');\n            }\n        });\n        \n        // Remove blur from VAT label elements\n        this.vatLabelElements.forEach(selector => {\n            const elements = document.querySelectorAll(selector);\n            elements.forEach(element => {\n                element.classList.remove('sv-blur-price', 'sv-price-blurred');\n            });\n        });\n        \n        // Remove overlay from timer containers\n        this.timerContainers.forEach(selector => {\n            const elements = document.querySelectorAll(selector);\n            elements.forEach(element => {\n                element.classList.remove('sv-blur-overlay', 'sv-market-closed');\n            });\n        });\n        \n        this.currentBlurState = false;\n    }\n    \n    // Check market status and update blur accordingly\n    updateBlurStatus() {\n        const marketOpen = this.isMarketOpen();\n        \n        if (marketOpen && this.currentBlurState) {\n            this.removeBlur();\n        } else if (!marketOpen && !this.currentBlurState) {\n            this.applyBlur();\n        }\n    }\n    \n    // Initialize the blur system\n    async init() {\n        if (this.isInitialized) {\n            console.log('Silver Blur: Already initialized');\n            return;\n        }\n        \n        console.log('Silver Blur: Starting initialization...');\n        \n        // Load holiday data first\n        await this.loadHolidayData();\n        \n        // Wait for DOM to be ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.startBlurSystem());\n        } else {\n            this.startBlurSystem();\n        }\n    }\n    \n    // Start the blur checking system\n    startBlurSystem() {\n        // Initial check\n        this.updateBlurStatus();\n        \n        // Set up interval to check every 30 seconds\n        this.blurCheckInterval = setInterval(() => {\n            this.updateBlurStatus();\n        }, 30000);\n        \n        this.isInitialized = true;\n        console.log('Silver Blur: System started, checking every 30 seconds');\n    }\n    \n    // Stop the blur system (cleanup)\n    stop() {\n        if (this.blurCheckInterval) {\n            clearInterval(this.blurCheckInterval);\n            this.blurCheckInterval = null;\n        }\n        \n        this.removeBlur();\n        this.isInitialized = false;\n        console.log('Silver Blur: System stopped');\n    }\n    \n    // Add a new holiday to the configuration\n    addHoliday(year, month, day, name, nameEn = '', type = 'custom') {\n        if (!this.holidayData || !this.holidayData.holidays) {\n            console.error('Silver Blur: Holiday data not loaded');\n            return false;\n        }\n        \n        const yearStr = year.toString();\n        const dateKey = `${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n        \n        if (!this.holidayData.holidays[yearStr]) {\n            this.holidayData.holidays[yearStr] = {};\n        }\n        \n        this.holidayData.holidays[yearStr][dateKey] = {\n            name: name,\n            name_en: nameEn || name,\n            type: type\n        };\n        \n        console.log(`Silver Blur: Added holiday - ${name} (${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')})`);\n        return true;\n    }\n    \n    // Remove a holiday from the configuration\n    removeHoliday(year, month, day) {\n        if (!this.holidayData || !this.holidayData.holidays) {\n            console.error('Silver Blur: Holiday data not loaded');\n            return false;\n        }\n        \n        const yearStr = year.toString();\n        const dateKey = `${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n        \n        if (this.holidayData.holidays[yearStr] && this.holidayData.holidays[yearStr][dateKey]) {\n            const holidayName = this.holidayData.holidays[yearStr][dateKey].name;\n            delete this.holidayData.holidays[yearStr][dateKey];\n            console.log(`Silver Blur: Removed holiday - ${holidayName} (${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')})`);\n            return true;\n        }\n        \n        console.warn(`Silver Blur: Holiday not found (${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')})`);\n        return false;\n    }\n    \n    // List all holidays for a specific year\n    listHolidays(year) {\n        if (!this.holidayData || !this.holidayData.holidays) {\n            console.error('Silver Blur: Holiday data not loaded');\n            return [];\n        }\n        \n        const yearStr = year.toString();\n        const holidays = this.holidayData.holidays[yearStr] || {};\n        \n        console.log(`=== Holidays for ${year} ===`);\n        Object.keys(holidays).sort().forEach(dateKey => {\n            const holiday = holidays[dateKey];\n            console.log(`${year}-${dateKey}: ${holiday.name} (${holiday.type})`);\n        });\n        console.log('=== End List ===');\n        \n        return holidays;\n    }\n    \n    // Manual test function for debugging\n    testTimeRange() {\n        const bangkokTime = this.getBangkokTime();\n        const holidayInfo = this.getHolidayInfo(bangkokTime);\n        const currentHour = bangkokTime.getHours();\n        const currentMinute = bangkokTime.getMinutes();\n        const dayOfWeek = bangkokTime.getDay();\n        \n        console.log('=== Silver Blur Time Test ===');\n        console.log('Current Bangkok Time:', bangkokTime.toLocaleString('th-TH', {timeZone: 'Asia/Bangkok'}));\n        console.log('Day of Week:', ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek]);\n        console.log('Is Holiday:', holidayInfo ? `Yes - ${holidayInfo.name}` : 'No');\n        console.log('Is Weekend Closure:', this.isWeekendClosure());\n        console.log('Is After Holiday Before Open:', this.isAfterHolidayBeforeOpen());\n        console.log(`Global Market Hours: ${this.config.marketOpenHour.toString().padStart(2, '0')}:${this.config.marketOpenMinute.toString().padStart(2, '0')} - 24:00`);\n        console.log(`Weekend Close: Saturday ${this.config.weekendCloseHour.toString().padStart(2, '0')}:${this.config.weekendCloseMinute.toString().padStart(2, '0')} - Sunday 24:00`);\n        console.log(`Current Time: ${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`);\n        console.log('Blur Logic: Global Market Hours + Weekend Closure + Holidays');\n        console.log('Market Status:', this.isMarketOpen() ? 'OPEN' : 'CLOSED');\n        console.log('Current Blur State:', this.currentBlurState ? 'BLURRED' : 'VISIBLE');\n        console.log('=== End Test ===');\n    }\n}\n\n// Global instance - can be reconfigured if needed\nwindow.silverBlur = window.silverBlur || new SilverPriceBlur();\n\n// Helper function to initialize with CDN\nwindow.initSilverBlurCDN = (cdnBaseUrl) => {\n    window.silverBlur = new SilverPriceBlur({\n        cdnBaseUrl: cdnBaseUrl\n    });\n    return window.silverBlur.init();\n};\n\n// Auto-initialize when script loads\ndocument.addEventListener('DOMContentLoaded', async () => {\n    // Wait a bit for the main silver price system to initialize\n    setTimeout(async () => {\n        await window.silverBlur.init();\n    }, 1000);\n});\n\n// Expose test function globally for console testing\nwindow.testSilverBlur = () => {\n    window.silverBlur.testTimeRange();\n};\n\n// Expose holiday management functions globally\nwindow.addHoliday = (year, month, day, name, nameEn = '', type = 'custom') => {\n    return window.silverBlur.addHoliday(year, month, day, name, nameEn, type);\n};\n\nwindow.removeHoliday = (year, month, day) => {\n    return window.silverBlur.removeHoliday(year, month, day);\n};\n\nwindow.listHolidays = (year) => {\n    return window.silverBlur.listHolidays(year);\n};\n\n// Set market opening time\nwindow.setMarketHours = (hour, minute = 0) => {\n    window.silverBlur.config.marketOpenHour = hour;\n    window.silverBlur.config.marketOpenMinute = minute;\n    console.log(`Silver Blur: Market open hours updated to ${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`);\n    // Immediately update blur status\n    window.silverBlur.updateBlurStatus();\n};\n\n// Set weekend close time\nwindow.setWeekendCloseTime = (hour, minute = 0) => {\n    window.silverBlur.config.weekendCloseHour = hour;\n    window.silverBlur.config.weekendCloseMinute = minute;\n    console.log(`Silver Blur: Weekend close time updated to Saturday ${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`);\n    // Immediately update blur status\n    window.silverBlur.updateBlurStatus();\n};"],"names":["root","factory","exports","module","define","amd","this","SilverPriceBlur","constructor","options","isInitialized","blurCheckInterval","currentBlurState","holidayData","config","holidayJsonUrl","cdnBaseUrl","marketOpenHour","marketOpenMinute","weekendCloseHour","weekendCloseMinute","priceElements","vatLabelElements","timerContainers","console","log","getBangkokTime","now","Date","toLocaleString","timeZone","loadHolidayData","holidayUrl","response","fetch","ok","Error","status","json","error","warn","message","holidays","isHoliday","date","checkDate","year","getFullYear","toString","dateKey","String","getMonth","padStart","getDate","getHolidayInfo","isWeekendClosure","bangkokTime","dayOfWeek","getDay","currentTotalMinutes","getHours","getMinutes","weekendCloseMinutes","isMarketOpen","marketOpenMinutes","dayName","timeInfo","holidayInfo","name","isAfterHolidayBeforeOpen","toLocaleTimeString","yesterday","setDate","applyBlur","forEach","elementId","element","document","getElementById","classList","add","selector","querySelectorAll","removeBlur","remove","updateBlurStatus","marketOpen","init","readyState","addEventListener","startBlurSystem","setInterval","stop","clearInterval","addHoliday","month","day","nameEn","type","yearStr","name_en","removeHoliday","holidayName","listHolidays","Object","keys","sort","holiday","testTimeRange","currentHour","currentMinute","window","silverBlur","initSilverBlurCDN","async","setTimeout","testSilverBlur","setMarketHours","hour","minute","setWeekendCloseTime"],"sourceRoot":""}